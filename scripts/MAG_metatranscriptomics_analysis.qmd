---
title: "MAG-level metatranscriptomics analysis"
author: "Shaman Narayanasamy"
editor: source
---

## Load libraries

```{r warning=F}
# tidytranscriptomics-related packages
library(tidybulk)
library(tidySummarizedExperiment) # we'll load this below to show what it can do
library(sva) # Must be loaded AFTER tidySummarizedExperiment as there is a clash in one of the dependency packages
library(DESeq2)

# tidyverse-friendly packages
library(tidyverse)
library(googlesheets4)
library(metap)
library(patchwork)
library(plotly)
library(ggrepel)
library(GGally)
library(tidyHeatmap)
```

## Select MAG of interest
This part isolates the transcripts from the MAGs of interest.

```{r}
bakta2MAG_path <- '/scratch/users/snarayanasamy/membrane_cleaning/output/metatranscriptomics/quantification/bin2bakta_id_mappings.tsv'

bakta2MAG <- sprintf('ssh iris "cat %s"', bakta2MAG_path ) %>%   
  pipe() %>%  
  read_tsv(col_names = c("MAG_ID", "Bakta_ID"))
```

```{r}
sample_info <- read_tsv('/Users/shaman.narayanasamy/Work/Data/KAUST/membrane_cleaning/mt_sample_info.txt', comment = "#") %>% 
  mutate(sample_ID = paste(sample, lane, sep = '_'),
         lane = as.numeric(str_extract(lane, "\\d+"))) %>% 
  select(sample_ID, everything(), -sample, -R1, -R2) 

MAGs_of_interest <- c("TI2_MAGScoT_cleanbin_000096") 

annotation_folder <- '/scratch/users/snarayanasamy/membrane_cleaning/output/annotation/all/bakta/'

MAG_annotation <- 
  sprintf('ssh iris "cat %s"', paste(annotation_folder, MAGs_of_interest, paste0(MAGs_of_interest, ".tsv"), sep = '/')) %>%  
  pipe() %>%   
  read_tsv(comment = "#", col_names = F) %>% 
  select(feature = X6, type = X2, gene_symbol = X7, gene_function = X8, gene_IDs = X9 )
```

```{r}
Bakta_IDs_of_interest <- filter(bakta2MAG, MAG_ID %in% c(MAGs_of_interest)) %>% pull(Bakta_ID)

counts <- 
  read_tsv("/Users/shaman.narayanasamy/Work/Data/KAUST/membrane_cleaning/metatranscriptomics_counts.tsv")

counts <- 
  counts %>%  
  filter(Bakta_ID %in% Bakta_IDs_of_interest) %>% 
  pivot_longer(
    cols = sample_info %>% pull(sample_ID),
    names_to = "sample_ID", 
    values_to = "counts") %>% 
  left_join(sample_info, by = "sample_ID") %>% 
  separate(sample_ID, into = c("SampleName"), sep = '_', remove = F, extra = "drop") %>% 
  mutate(SampleName = str_remove(SampleName, "\\d+")) %>% 
  select(feature = Name, sample = sample_ID, counts, SampleName, condition, phase, replicate, lane, Run = sample_ID, avgLength = EffectiveLength) %>% 
  as_SummarizedExperiment(.sample = sample,
                          .transcript = feature,
                          .abundance = counts)
```
## Preprocess the data

### Convert to deseq2 object to perform housekeeping gene based scaling
```{r}
dds <- DESeq2::DESeqDataSet(counts %>% as_tibble() %>% mutate(counts = as.integer(counts + 1),
                                                              condition = as.factor(condition),
                                                              phase = as.factor(phase),
                                                              replicate = as.factor(replicate),
                                                              lane = as.factor(lane)
                                                              ) %>% 
      as_SummarizedExperiment(.abundance = counts, .sample = sample, .transcript = feature),   
      design = ~ condition*phase + replicate + lane)
```

### ComBat-seq scaling
```{r}
combat_counts <- 
  ComBat_seq(counts(dds), 
             batch = colnames(dds) %>% as_tibble() %>% rename(sample = value) %>% left_join(sample_info, by = c("sample" = "sample_ID")) %>% pull(replicate),
             group = colnames(dds) %>% as_tibble() %>% rename(sample = value) %>% left_join(sample_info, by = c("sample" = "sample_ID")) %>% pull(condition)
             ) %>% 
  as_tibble(rownames = "feature") %>% 
  pivot_longer(cols = sample_info$sample_ID, names_to = "sample", values_to = "combat_counts") %>% 
  right_join(counts %>% as_tibble(), by = c("feature", "sample")) %>% 
  dplyr::select(-counts) %>% 
  rename(counts = combat_counts) %>% 
  as_SummarizedExperiment(.abundance = counts,
                          .sample = sample,
                          .transcript = feature)
```
### Housekeeping gene scaling
#### Assess the expression of housekeeping genes
```{r}
housekeeping_genes <- c("gyrA",
                        "gyrB",
                        "recA",
                        "rho",
                        "ffh",
                        "fusA",
                        "dnaK",
                        "groEL",
                        "groES")

```
#### Inspect housekeeping genes across all samples/replicates
```{r}
MAG_annotation %>% 
  filter(gene_symbol %in% housekeeping_genes) %>% 
  left_join(counts %>% as_tibble(), by = "feature") %>% 
  group_by(feature, sample) %>% 
  summarize(
    avg_count = mean(counts, na.rm = TRUE)
  ) %>%
  ungroup() %>% 
  group_by(feature) %>% 
    summarize(
    mean_count = mean(avg_count, na.rm = TRUE),
    sd_count = sd(avg_count, na.rm = TRUE),
    cv = sd_count / mean_count
  ) %>%
  arrange(cv) %>% 
  left_join(MAG_annotation)
```

#### Inspect housekeeping genes within replicates
```{r message=F, warning=F}
housekeeping_replicates <- list()
for (replicate_id in unique(sample_info$replicate)) {
 
   housekeeping_replicates[[replicate_id]] <-  
     MAG_annotation %>%  
     filter(gene_symbol %in% housekeeping_genes) %>% 
     left_join(counts %>% as_tibble(), by = "feature") %>% 
     filter(replicate == replicate_id) %>% 
     group_by(feature, sample) %>% 
     summarize(
       avg_count = mean(counts, na.rm = TRUE)
     ) %>%
     ungroup() %>% 
     group_by(feature) %>% 
       summarize(
       mean_count = mean(avg_count, na.rm = TRUE),
       sd_count = sd(avg_count, na.rm = TRUE),
       cv = sd_count / mean_count
     ) %>%
     arrange(cv) %>% 
     left_join(MAG_annotation)
   
}

housekeeping_replicates
```
In general, there is high variability between the housekeeping genes. Therefore, we select 'dnaK', which shows the lowest variation in most replicates.
```{r}
hkg_vector <- rownames(dds) %in% "CLCDCC_00215" 
dds_hkg <- DESeq2::estimateSizeFactors(dds, controlGenes = hkg_vector)

## Convert back again to tidybulk experimental object to ensure downstream compatibility
hkg_counts <- counts(dds_hkg, normalized = T) %>% round() %>% as_tibble(rownames = "feature") %>% 
  pivot_longer(cols = sample_info$sample_ID, names_to = "sample", values_to = "hkg_counts") %>%  
  right_join(counts %>% as_tibble(), by = c("feature", "sample")) %>% 
  dplyr::select(-counts) %>% 
  rename(counts = hkg_counts) %>% 
  as_SummarizedExperiment(.abundance = counts,
                          .sample = sample,
                          .transcript = feature)
```

### ComBat-seq and housekeeping normalisation
#### Inspect housekeeping genes across all samples/replicates
```{r}
MAG_annotation %>% 
  filter(gene_symbol %in% housekeeping_genes) %>% 
  left_join(combat_counts %>% as_tibble(), by = "feature") %>% 
  group_by(feature, sample) %>% 
  summarize(
    avg_count = mean(counts, na.rm = TRUE)
  ) %>%
  ungroup() %>% 
  group_by(feature) %>% 
    summarize(
    mean_count = mean(avg_count, na.rm = TRUE),
    sd_count = sd(avg_count, na.rm = TRUE),
    cv = sd_count / mean_count
  ) %>%
  arrange(cv) %>% 
  left_join(MAG_annotation)
```
In general, the combat-seq normalisation reduced the amount of overall variation accross all samples/replicates.
#### Inspect housekeeping genes within each replicate
```{r message=F, warning=F}
housekeeping_replicates <- list()

for (replicate_id in unique(sample_info$replicate)) {
    housekeeping_replicates[[replicate_id]] <-  
     MAG_annotation %>%  
     filter(gene_symbol %in% housekeeping_genes) %>% 
     left_join(combat_counts %>% as_tibble(), by = "feature") %>% 
     filter(replicate == replicate_id) %>% 
     group_by(feature, sample) %>% 
     summarize(
       avg_count = mean(counts, na.rm = TRUE)
     ) %>%
     ungroup() %>% 
     group_by(feature) %>% 
       summarize(
       mean_count = mean(avg_count, na.rm = TRUE),
       sd_count = sd(avg_count, na.rm = TRUE),
       cv = sd_count / mean_count
     ) %>%
     arrange(cv) %>% 
     left_join(MAG_annotation)
}

housekeeping_replicates
```
```{r}
hkg_vector <- rownames(dds) %in% c("CLCDCC_00215", "CLCDCC_10560")
dds_hkg <- DESeq2::estimateSizeFactors(dds, controlGenes = hkg_vector)

## Convert back again to tidybulk experimental object to ensure downstream compatibility
hkg_combat_counts <- counts(dds_hkg, normalized = T) %>% round() %>% as_tibble(rownames = "feature") %>% 
  pivot_longer(cols = sample_info$sample_ID, names_to = "sample", values_to = "hkg_counts") %>%  
  right_join(counts %>% as_tibble(), by = c("feature", "sample")) %>% 
  dplyr::select(-counts) %>% 
  rename(counts = hkg_counts) %>% 
  as_SummarizedExperiment(.abundance = counts,
                          .sample = sample,
                          .transcript = feature)
```
## Visualise data
Produce visualisations of different normalisations
```{r}
# Initiate lists
## List of PCA plots
p.pca <- list() 

## List of MDS plots
p.mds <- list()

## List of boxplots
p.bp <- list()

## List of density plots
p.dp <- list()

## List of density plots
p.hm <- list()
```
### Raw counts
#### PCA
```{r}
p.pca[[1]] <- 
  counts %>%
  reduce_dimensions(method = "PCA") %>% 
  pivot_sample() %>% as_tibble() %>% 
  ggplot(aes(x = PC1, y = PC2, colour = as.character(replicate), shape = phase)) +
  geom_point() +
  geom_text_repel(aes(label = .sample), show.legend = FALSE) +
  theme_minimal()
```
#### MDS
```{r}
p.mds[[1]] <- 
  counts %>%
  reduce_dimensions(method = "MDS") %>% 
  pivot_sample() %>% as_tibble() %>% 
  ggplot(aes(x = Dim1, y = Dim2, colour = as.character(replicate), shape = phase)) +
  geom_point() +
  geom_text_repel(aes(label = .sample), show.legend = FALSE) +
  theme_minimal()
```
#### Boxplot
```{r}
p.bp[[1]] <-  
  counts %>% as_tibble() %>%  
  ggplot(aes(x = .sample, y = log(counts), fill = as.character(replicate))) +
  geom_boxplot() 
```
#### Density plot
```{r}
p.dp[[1]] <-   
  counts %>% as_tibble() %>%  
  ggplot(aes(x=counts, color=as.character(.sample))) + 
  geom_density() +
  scale_x_log10() + 
  theme_minimal()
```

#### Heatmap
```{r}
p.hm[[1]] <- 
  counts %>% 
  keep_abundant(minimum_counts = 1) %>% 
  
  # extract 100 most variable genes
  keep_variable(.abundance = counts, top = 100) %>%
  as_tibble() %>%
  mutate(replicate = as.character(replicate), 
         lane = as.character(lane)) %>% 
  
  # create heatmap
  heatmap(
    .column = sample,
    .row = feature,
    .value = counts,
    transform = log1p,
    name = "counts"
  ) %>%
  add_tile(condition) %>%
  add_tile(replicate) %>% 
  add_tile(lane)
```

### ComBat-seq counts
#### PCA
```{r}
p.pca[[2]] <- 
  combat_counts %>%
  reduce_dimensions(method = "PCA") %>% 
  pivot_sample() %>% as_tibble() %>% 
  ggplot(aes(x = PC1, y = PC2, colour = as.character(replicate), shape = phase)) +
  geom_point() +
  geom_text_repel(aes(label = .sample), show.legend = FALSE) +
  theme_minimal()
```

#### MDS
```{r}
p.mds[[2]] <-  
  combat_counts %>%
  reduce_dimensions(method = "MDS") %>% 
  pivot_sample() %>% as_tibble() %>% 
  ggplot(aes(x = Dim1, y = Dim2, colour = as.character(replicate), shape = phase)) +
  geom_point() +
  geom_text_repel(aes(label = .sample), show.legend = FALSE) +
  theme_minimal()
```

#### Boxplot
```{r}
p.bp[[2]] <- 
  combat_counts %>% as_tibble() %>% 
  ggplot(aes(x = sample, y = log(counts), fill = as.character(replicate))) + 
  geom_boxplot() 
```
#### Density plot
```{r}
p.dp[[2]] <- 
  combat_counts %>% as_tibble() %>%  
  ggplot(aes(x=counts, color=as.character(.sample))) +
  geom_density() +
  scale_x_log10() +
  theme_minimal()
```
#### Heatmap
```{r}
p.hm[[2]] <- 
  combat_counts %>% 
  keep_abundant(minimum_counts = 1) %>% 
  
  # extract 100 most variable genes
  keep_variable(.abundance = counts, top = 100) %>%
  as_tibble() %>%
  mutate(replicate = as.character(replicate), 
         lane = as.character(lane)) %>% 
  
  # create heatmap
  heatmap(
    .column = sample,
    .row = feature,
    .value = counts,
    transform = log1p,
    name = "combat"
  ) %>%
  add_tile(condition) %>%
  add_tile(replicate) %>% 
  add_tile(lane)
```

### Housekeeping genes normalised counts
#### PCA
```{r}
p.pca[[3]] <- 
  hkg_counts %>%
  reduce_dimensions(method = "PCA") %>% 
  pivot_sample() %>% as_tibble() %>% 
  ggplot(aes(x = PC1, y = PC2, colour = as.character(replicate), shape = phase)) +
  geom_point() +
  geom_text_repel(aes(label = .sample), show.legend = FALSE) +
  theme_minimal()
```
#### MDS
```{r}
p.mds[[3]] <- 
  hkg_counts %>%
  reduce_dimensions(method = "MDS") %>% 
  pivot_sample() %>% as_tibble() %>% 
  ggplot(aes(x = Dim1, y = Dim2, colour = as.character(replicate), shape = phase)) +
  geom_point() +
  geom_text_repel(aes(label = .sample), show.legend = FALSE) +
  theme_minimal()
```
#### Boxplot
```{r}
p.bp[[3]] <- 
  hkg_counts %>% as_tibble() %>%   
  ggplot(aes(x = .sample, y = log(counts), fill = as.character(replicate))) +
  geom_boxplot() 
```
#### Density plot
```{r}
p.dp[[3]] <-  
  hkg_counts %>% as_tibble() %>%  
  ggplot(aes(x=counts, color=as.character(.sample))) +
  geom_density() + 
  scale_x_log10() + 
  theme_minimal()
```
#### Heatmap
```{r}
p.hm[[3]] <- 
  hkg_counts %>% 
  keep_abundant(minimum_counts = 1) %>% 
  
  # extract 100 most variable genes
  keep_variable(.abundance = counts, top = 100) %>%
  as_tibble() %>%
  mutate(replicate = as.character(replicate), 
         lane = as.character(lane)) %>% 
  
  # create heatmap
  heatmap(
    .column = sample,
    .row = feature,
    .value = counts,
    transform = log1p
  ) %>%
  add_tile(condition) %>%
  add_tile(replicate) %>% 
  add_tile(lane)
```
### ComBat-seq and housekeeping gene normalisation
#### PCA
```{r}
p.pca[[4]] <- 
  hkg_combat_counts %>%
  reduce_dimensions(method = "PCA") %>% 
  pivot_sample() %>% as_tibble() %>% 
  ggplot(aes(x = PC1, y = PC2, colour = as.character(replicate), shape = phase)) +
  geom_point() +
  geom_text_repel(aes(label = .sample), show.legend = FALSE) +
  theme_minimal()
```
#### MDS
```{r}
p.mds[[4]] <- 
  hkg_combat_counts %>%
  reduce_dimensions(method = "MDS") %>% 
  pivot_sample() %>% as_tibble() %>% 
  ggplot(aes(x = Dim1, y = Dim2, colour = as.character(replicate), shape = phase)) +
  geom_point() +
  geom_text_repel(aes(label = .sample), show.legend = FALSE) +
  theme_minimal()
```
#### Boxplot
```{r}
p.bp[[4]] <- 
  hkg_combat_counts %>% as_tibble() %>%  
  ggplot(aes(x = .sample, y = log(counts), fill = as.character(replicate))) +
  geom_boxplot() 
```
#### Density plot
```{r}
p.dp[[4]] <- 
  hkg_combat_counts %>% as_tibble() %>%  
  ggplot(aes(x=counts, color=as.character(.sample))) + 
  geom_density() +
  scale_x_log10() + 
  theme_minimal()
```
#### Heatmap
```{r}
p.hm[[4]] <- 
  hkg_combat_counts %>% 
  keep_abundant(minimum_counts = 1) %>% 
  
  # extract 100 most variable genes
  keep_variable(.abundance = counts, top = 100) %>%
  as_tibble() %>%
  mutate(replicate = as.character(replicate), 
         lane = as.character(lane)) %>% 
  
  # create heatmap
  heatmap(
    .column = sample,
    .row = feature,
    .value = counts,
    transform = log1p
  ) %>%
  add_tile(condition) %>%
  add_tile(replicate) %>% 
  add_tile(lane)
```

### Combine plots
```{r}
p.pca[[1]] + p.pca[[2]] + p.pca[[3]] + p.pca[[4]] + plot_layout(guides = "collect", ncol = 1) & theme(legend.position = "bottom")
```
```{r}
p.mds[[1]] + p.mds[[2]] + p.mds[[3]] + p.mds[[4]] + plot_layout(guides = "collect", ncol = 1) & theme(legend.position = "bottom")
```
```{r}
for (i in 1:length(p.bp)){
  if (i <= 3){
    p.bp[[i]] <- 
      p.bp[[i]] +  
      theme( 
        axis.text.x = element_blank(), 
        axis.title.x = element_blank()
      ) 
  } else {
   p.bp[[i]] <- p.bp[[i]] + 
     theme(
       axis.text.x = element_text(angle = 90)
       )
  }
}
  
p.bp[[1]] + p.bp[[2]] + p.bp[[3]] + p.bp[[4]] + plot_layout(guides = "collect", ncol = 1) & theme(legend.position = "bottom")
```
```{r}
p.dp[[1]] + p.dp[[2]] + p.dp[[3]] + p.dp[[4]] + plot_layout(guides = "collect", ncol = 1) & theme(legend.position = "left")
```

```{r}
ht_list <- p.hm[[1]] + p.hm[[2]] #+ p.hm[[3]] + p.hm[[4]] + plot_layout()
  #plot_layout(guides = "collect", ncol = 1) & theme(legend.position = "left")

yes <- p.hm[[1]]
no <- p.hm[[2]]

```
## Differential expression analysis
Store all the different expression matrices within a list. The weird distributions for the housekeeping gene normalised sampels cause issues in the downstream analyses. The reason for this is unknown. Hence, we exclude any housekeeping gene -based results.
```{r}
expr_list <- list("raw" = counts, "combat" = combat_counts, "hkg" = hkg_counts, "combat_hkg" = hkg_combat_counts)

names(expr_list)[1]
```
```{r}
## Function: Perform all DE analysis methods on given tables/normalisations including different phases
compute_DE_genes <- function(expr_list, phase_value = "normal"){ 
  
  for (i in 1:length(expr_list)){ 
    expr_obj <-
      expr_list[[i]] %>% 
      filter(phase == {{ phase_value }}) %>% 
      keep_abundant(minimum_counts = 1) 
    
    expr_source <- names(expr_list)[i]
    
    tmp_de_res <-  
     
       expr_obj %>% 
      # edgeR QLT
      test_differential_abundance(
        ~ condition + replicate + lane,
        method = "edgeR_quasi_likelihood",
        prefix = paste0(expr_source, "_", "edgerQLT_")
      ) %>%
    
      # edgeR LRT
      test_differential_abundance(
        ~ condition + replicate + lane,
        method = "edgeR_likelihood_ratio",
        prefix = paste0(expr_source, "_", "edgerLR_")
      ) %>%
    
      # limma-voom
      test_differential_abundance(
        ~ condition + replicate + lane,
        method = "limma_voom",
        prefix = paste0(expr_source, "_", "voom_")
      ) 
    
    ## DESeq2
    tmp_de_res <-  
      expr_obj %>% 
      as_tibble() %>% 
      mutate(counts = round(counts)) %>% 
      as_SummarizedExperiment(.sample = sample, 
                              .abundance = counts,
                              .transcript = feature) %>% 
      test_differential_abundance(
        ~ condition + replicate + lane,
        method = "DESeq2",
        prefix = paste0(expr_source, "_", "DESeq2_")
        ) %>% 
      as_tibble() %>% 
      select(contains("DESeq2_")) %>% 
      bind_cols(tmp_de_res %>% as_tibble(), .) %>%  
      as_SummarizedExperiment(.sample = sample,
                              .abundance = counts,
                              .transcript = feature)
     
    ## Now join the tables 
    if (i == 1){
      de_res <- 
        tmp_de_res %>% 
        as_tibble() %>% 
        distinct() %>%   
        select(-c(".feature",   
                  ".sample", 
                  "counts", 
                  "sample", 
                  "SampleName", 
                  "condition", 
                  "phase", 
                  "replicate", 
                  "lane", 
                  "Run", 
                  ".abundant")) %>%  
        distinct()
    } else {
      de_res <-  
        full_join(de_res, 
                  tmp_de_res %>% as_tibble() %>%   
                    select(-c(".feature",   
                              ".sample", 
                              "counts", 
                              "sample", 
                              "SampleName", 
                              "condition", 
                              "phase", 
                              "replicate", 
                              "lane", 
                              "Run", 
                              ".abundant")) %>%  
                    distinct(),  
                  by = c("feature", "avgLength")) %>%   
        distinct() 
      } 
  } 
  return(de_res)
  }
```

```{r}
# Function: Define consistency of directionality
all_same_direction <- function(values) {
  non_na_values <- na.omit(values)
  all(non_na_values > 0) | all(non_na_values < 0)
}
```

```{r}
## Function: Compute composite DE scores such as proportion of significant p-values and composite p-values and adjusted p-values
compute_composite_DE_results <- function(de_res){ 
  # List p-value columns
  pvalue_cols <- 
    de_res %>% 
    select(contains("_PValue"), contains("_P.Value"), contains("_pvalue")) %>% 
    colnames()
  
  # List fold-change columns
  fc_cols <- 
    de_res %>% 
    select(contains("Fold"), contains("FC")) %>%  
    select(!contains("DESeq2_lfcSE")) %>% 
    colnames()
  
  comp_de_res <-  
    de_res %>%  
    rowwise() %>%  
    mutate(significant_count = sum(across(all_of(pvalue_cols),  
                                          ~ifelse(is.na(.), NA, . < 0.05)), na.rm = TRUE),  
           non_na_count = sum(!is.na(across(all_of(pvalue_cols))))) %>%  
    ungroup() %>%  
    mutate(significant_proportion = significant_count/non_na_count) %>%  
    rowwise() %>%  
    mutate(consistent_direction = all_same_direction(across(all_of(fc_cols)))) %>%
    ungroup() %>% 
    mutate(    
      composite_p_val_fisher = pmap_dbl(  
        select(., matches("_PValue|P\\.Value|_pvalue")),
        .f = function(...) { 
          args <- list(...)
          p_values <- na.omit(unlist(args))
          if (length(p_values) == 0) {
            return(NA_real_)
          }
          sumlog(p_values)$p
        }
        ),
      composite_p_val_stouffer = pmap_dbl( 
        select(., matches("_PValue|P\\.Value|_pvalue")),
        .f = function(...) {
          args <- list(...)
          p_values <- na.omit(unlist(args))
          if (length(p_values) == 0) {
            return(NA_real_)
          }
          metap::sumz(p_values)$p
        }
        )   
    ) %>%   
    mutate( 
      composite_p_val_fisher_BH = p.adjust(composite_p_val_fisher, method = "BH"),
      composite_p_val_stouffer_BH = p.adjust(composite_p_val_stouffer, method = "BH"),
      composite_p_val_fisher_BY = p.adjust(composite_p_val_fisher, method = "BY"),
      composite_p_val_stouffer_BY = p.adjust(composite_p_val_stouffer, method = "BY"),
      composite_p_val_fisher_bonferroni = p.adjust(composite_p_val_fisher, method = "bonferroni"),
      composite_p_val_stouffer_bonferroni = p.adjust(composite_p_val_stouffer, method = "bonferroni"),
      composite_p_val_fisher_fdr = p.adjust(composite_p_val_fisher, method = "fdr"),
      composite_p_val_stouffer_fdr = p.adjust(composite_p_val_stouffer, method = "fdr") 
      )
}
```

### For initial samples
```{r}
de_norm <- compute_DE_genes(expr_list = expr_list, phase = "normal")
comp_de_norm <- compute_composite_DE_results(de_norm)


```
### For backflush samples
```{r}
de_bflush <- compute_DE_genes(expr_list = expr_list, phase = "backflush")
comp_de_bflush <- compute_composite_DE_results(de_bflush)
```

Write table with all DE genes and their annotation
```{r}
comp_de_norm %>% 
  filter(composite_p_val_fisher_fdr <= 0.05 & 
           significant_proportion > 0.5 & 
           combat_DESeq2_log2FoldChange >= abs(log2(2))) %>% 
  select(feature, composite_p_val_fisher, composite_p_val_fisher_fdr, significant_proportion, raw_edgerQLT_logFC) %>% 
  left_join(MAG_annotation, by = "feature") %>% 
  bind_cols(phase = "initial") %>% 
  select(feature, phase, everything()) %>% 
  write_tsv("/Users/shaman.narayanasamy/Work/Data/KAUST/membrane_cleaning/de_genes_2fc.txt")
  
comp_de_bflush %>% 
  filter(composite_p_val_fisher_fdr <= 0.05 & 
           significant_proportion > 0.5 & 
           combat_DESeq2_log2FoldChange >= abs(log2(2))) %>% 
  select(feature, composite_p_val_fisher, composite_p_val_fisher_fdr, significant_proportion, raw_edgerQLT_logFC) %>% 
  left_join(MAG_annotation, by = "feature") %>% 
  bind_cols(phase = "backflush") %>% 
  select(feature, phase, everything()) %>% 
  write_tsv("/Users/shaman.narayanasamy/Work/Data/KAUST/membrane_cleaning/de_genes_2fc.txt", append = T)
```

## Topgenes!
```{r}
#topgenes <- 
  counts %>%  
  as_SummarizedExperiment(.sample = sample, .transcript = feature, .abundance = counts) %>% 
  pivot_transcript(.transcript = feature) #%>% 
  arrange(composite_p_val_fisher) #%>%
  head(10) %>%
  pull(feature)

de_bflush_all_list[[4]] %>%  
  pivot_transcript(.transcript = .feature) %>%
  mutate(significant = composite_p_val_fisher_fdr < 0.05 & abs(edgerQLT_logFC) >= log2(2)) %>% 
  mutate(symbol = ifelse(feature %in% topgenes, as.character(feature), "")) %>% 
  ggplot(aes(x = edgerLR_logFC, y = composite_p_val_fisher, label = symbol)) +
  geom_point(aes(color = significant, size = significant, alpha = significant)) +
  geom_text_repel() +
  theme_minimal() +
  scale_y_continuous(trans = "log10_reverse") +
  scale_color_manual(values = c("black", "#e11f28")) +
  scale_size_discrete(range = c(1, 2))
```
