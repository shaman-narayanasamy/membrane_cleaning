---
title: "Membrane cleaning MAG analysis"
author: "Shaman Narayanasamy"
editor: source
fig-cap-location: bottom
format:
  html: default
execute:
  echo: false 
  warning: false
  message: false
params:
  mag_info_ncbi: "/Users/naras0c/Work/data/membrane_cleaning/dereplicated_refined_MAG_information-ncbi.tsv"
  mag_info_gtdb: "/Users/naras0c/Work/data/membrane_cleaning/dereplicated_refined_MAG_information-gtdb.tsv"
---

```{r load_libraries}
library(tidyverse)
library(googlesheets4)
library(rlang)

# Load the RColorBrewer library
library(RColorBrewer)
```
# Description

This document is generated from a quarto markdown file that contains the code for the analysis. To view the code, please visit the membrane cleaning github repository or request it from the author of this file. 

## Data
The following information is required for this analysis:

- `dRep` results, which includes completeness/contamination metrics from checkM
- `CAT/BAT` taxonomic classification output
- Gene annotations from `Bakta` to link transcripts to MAGs
- Mapping of Bakta genome IDs to MAG IDs 
- Raw counts of metagenomic reads mapped to MAGs
- Raw counts of metatranscriptomic reads mapped to transcripts of all MAGs
- Sample information table 

MAGs with multiple taxonomic assignments are considered to be ambiguous and are excluded from downstream analyses. The `dRep` table and `CAT/BAT` tables are merged to combine the completeness information with taxonomic information.
```{r read_mag_info}
mag_info <- 
  read_tsv(params$mag_info_gtdb)
```
## Expore the classification metrics
```{r visualise_mag_stats_pie_completeness}
#| label: fig-mag_stats_completeness
#| fig-cap: "Metagenomic assembled genome (MAG) completeness statistics." 
#| layout-ncol: 1
mag_info %>% 
  select("completeness_metric") %>% 
  group_by(completeness_metric) %>% 
  summarise(count = n()) %>% 
  ungroup() %>% 
 ggplot(aes(x = "", y = count, fill = completeness_metric)) +
  geom_bar(width = 1, stat = "identity") +
  coord_polar("y") +
  geom_text(aes(label = count), position = position_stack(vjust = 0.5)) +
  theme_void() +
  theme(legend.title = element_blank())
```
```{r visualise_mag_stats_pie_contamination}
#| label: fig-mag_stats_contamination
#| fig-cap: "Metagenomic assembled genome (MAG) contamination statistics." 
#| layout-ncol: 1
mag_info %>% 
  select("contamination_metric") %>% 
  group_by(contamination_metric) %>% 
  summarise(count = n()) %>% 
  ungroup() %>% 
 ggplot(aes(x = "", y = count, fill = contamination_metric)) +
  geom_bar(width = 1, stat = "identity") +
  coord_polar("y") +
  geom_text(aes(label = count), position = position_stack(vjust = 0.5)) +
  theme_void() +
  theme(legend.title = element_blank())
```
```{r create_ordering}
## Create taxonomic order for downstream visualisation
taxonomy_ordering <- c("superkingdom",
                       "phylum", 
                       "class", 
                       "order" ,
                       "family",
                       "genus",
                       "species"  
                       )
```

```{r visualise_mag_stats_bar}
mag_info %>% 
  select( 
    c("genome", 
      "superkingdom_score",
      "phylum_score",
      "class_score",
      "order_score" ,
      "family_score",
      "genus_score",
      "species_score" 
      )
  ) %>% 
  pivot_longer(cols = c(
      "superkingdom_score",
      "phylum_score",
      "class_score",
      "order_score" ,
      "family_score",
      "genus_score",
      "species_score"),
               names_to = "taxonomy", 
               values_to = "score"
               ) %>% 
  mutate(classified = ifelse(!is.na(score), "yes", "no")) %>% 
  separate(taxonomy, into = "taxonomy", sep = "_") %>% 
  group_by(taxonomy, classified) %>% 
  summarise(count = n()) %>% 
  ungroup() %>% 
  mutate(proportion = (count/257)*100,
         taxonomy = factor(taxonomy, levels = taxonomy_ordering)) %>% 
  ggplot(aes(x = taxonomy, y = proportion, fill = classified)) +
  geom_bar(stat = "identity", position = "stack") +
  scale_fill_manual(values = c("yes" = "darkgreen", "no" = "gray")) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, 
                                           margin = margin(t = 5, r = 0, b = 0, l = 0)))
```
## Explore the candidate bacteria of interest
```{r taxa_of_interest, eval = F}
taxa_of_interest <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/1w5wCKSBxTwUp__m4_PcbmxbumGaY-9d90i75Gsb5DvQ/edit#gid=1591395475", sheet = "Taxa of interest")

inner_join(taxa_of_interest %>% select(genus), mag_info, by = "genus")
inner_join(taxa_of_interest %>% select(family), mag_info, by = "family")
inner_join(taxa_of_interest %>% select(order), mag_info, by = "order")
inner_join(taxa_of_interest %>% select(class), mag_info, by = "class")
inner_join(taxa_of_interest %>% select(phylum), mag_info, by = "phylum")

mag_info %>% filter(!is.na(species)) %>% filter(species != "no support")
```
```{r read_mag_info}
mag_info <- 
  mag_info %>% 
  ## Remove only those MAGs that were highly contaminated
  filter(contamination_metric != "very high") %>%  
  mutate_if(is.character, ~na_if(., "no support")) %>% 
  filter(!is.na(family) | genome == "TI2_MAGScoT_cleanbin_000096") ## Geobacter
```

```{r load_sample_information, warning=F}
sample_info <- 
  read_tsv('/Users/naras0c/Work/data/membrane_cleaning/sample_info.txt', comment = "#") %>% 
  dplyr::rename("sample_ID" = "sample_id")
```

## Metagenomics assembled genomes (MAG)
@fig-mag_stats shows the completeness statistics and the proportion of MAGs that
were successfully classified on each taxonomic level. Due to our stringent MAG
refinement and selection process, it is generally expected that we retain
relatively high-quality MAGs (@fig-mag_stats-1). However, only a small portion
of those MAGs could be classified at the lower taxonomy levels, e.g. class and
below (@fig-mag_stats-2). The larger number of "species" classified, is likely
due to the presence of MAGs from previous studies deposited into the database.


## Metagenomics 
@fig-mg_relab shows the metagenomic relative abundances of MAGs aggregated on
different taxonomic levels. The large number of unknown taxa on the lower
taxonomic levels (i.e. fig-mag_stats) is reflected in the respective
relative abundance plots (e.g. fig-mg_relab-4).

```{r prepare_mg_data}
mg_counts <- 
  read_tsv("/Users/naras0c/Work/data/membrane_cleaning/metagenomics_MAG_counts.tsv") %>% 
  pivot_longer(cols = 
                 sample_info %>% select(sample_ID) %>% 
                 separate(sample_ID, into = "sample_ID", sep = "_") %>% 
                 distinct() %>% pull(sample_ID),
               names_to = "sample_ID",
               values_to = "count") %>% 
  left_join(sample_info, by = "sample_ID") %>% 
  right_join(mag_info, by = c("MAG_ID" = "genome")) # Join based on the taxa that were retained for analysis
```

```{r create_palette, fig.width=12, fig.height=6}
# Create a palette with 33 colours and combine them
palette_33 <- c(brewer.pal(12, "Set3"),
                brewer.pal(8, "Set2"),
                brewer.pal(9, "Set1"),
                brewer.pal(4, "Dark2"))

# Verify the length of the palette
length(palette_33)  # Should be 33
```


```{r visualise_relab, fig.width=12, fig.height=6}
taxonomy_1 = "family"
taxonomy_2 = "genus"
  
taxonomy_sym_1 <- sym(taxonomy_1)
taxonomy_sym_2 <- sym(taxonomy_2)

mg_counts %>% 
  select(!!taxonomy_sym_1, !!taxonomy_sym_2, sample_ID, count, condition, phase, replicate) %>%
  mutate(taxonomy = paste(!!taxonomy_sym_1, !!taxonomy_sym_2, sep = ":")) %>% 

  group_by(taxonomy, sample_ID) %>% 
  mutate(count = sum(count)) %>% 
  ungroup() %>% 
  group_by(sample_ID) %>% 
  mutate(total_count_sample = sum(count)) %>% 
  mutate(relab = count/total_count_sample * 100) %>% 
  ungroup() %>% 
  mutate(taxonomy := ifelse(taxonomy == "no support", NA, taxonomy)) %>% 
  
  ggplot(aes(x = replicate, y = relab, fill = taxonomy) ) +
  geom_bar(position = "stack", stat = "identity") +
  scale_fill_manual(values = palette_33) +
  labs(
    y = "Relative abundance (%)",   
    x = "Cycle",
    fill = paste("Taxonomy", " - ", taxonomy_sym_1, ":", taxonomy_sym_2, sep = "")
  ) +
  facet_grid(condition ~ phase, scale = "free_x") +
  theme_bw() +
  theme(legend.position = "right", 
        strip.background = element_rect(color = NA) # Remove background
  )
```

## Metatranscriptomics
```{r load_sample_information, warning=F}
sample_info <- 
  read_tsv('/Users/naras0c/Work/data/membrane_cleaning/mt_sample_info.txt', comment = '#') %>% 
  mutate(sample_ID = paste(sample, lane, sep = '_'),
         lane = as.numeric(str_extract(lane, "\\d+"))) %>% 
  select(sample_ID, everything(), -sample, -R1, -R2) %>% 
  mutate(replicate = as.factor(replicate),
         lane = as.factor(lane)
         ) %>% 
  separate(sample_ID, extra = "drop", into = "sample", remove = FALSE) %>% 
  mutate(sample = str_remove_all(sample, "[0-9]$"))
```


```{r}
bakta2MAG <- read_tsv("/Users/naras0c/Work/data/membrane_cleaning/bakta2MAG_mappings.tsv")
```


```{r read_transcriptomics_data}
mt_counts <- 
  read_tsv("/Users/naras0c/Work/data/membrane_cleaning//metatranscriptomics_counts.tsv") %>% 
  select(Bakta_ID, contains("_L00")) %>% 
  pivot_longer(cols = sample_info %>% pull(sample_ID),
               names_to = "sample_ID",
               values_to = "count") %>% 
  group_by(Bakta_ID, sample_ID) %>% 
  summarise(count = sum(count, na.rm = T)) %>% 
  ungroup() %>% 
  distinct() %>% 
  left_join(bakta2MAG, by = "Bakta_ID") %>% 
  right_join(mag_info, by = c("MAG_ID" = "genome")) %>% 
  left_join(sample_info, by = "sample_ID")
```

```{r visualise_mt_relab, fig.width=12, fig.height=6}
taxonomy_1 = "family"
taxonomy_2 = "genus"
  
taxonomy_sym_1 <- sym(taxonomy_1)
taxonomy_sym_2 <- sym(taxonomy_2)

mt_counts %>% 
  select(!!taxonomy_sym_1, !!taxonomy_sym_2, sample_ID, count, condition, phase, replicate) %>%
  mutate(taxonomy = paste(!!taxonomy_sym_1, !!taxonomy_sym_2, sep = ":")) %>% 

  group_by(taxonomy, sample_ID) %>% 
  mutate(count = sum(count)) %>% 
  ungroup() %>% 
  group_by(sample_ID) %>% 
  mutate(total_count_sample = sum(count)) %>% 
  mutate(relab = count/total_count_sample * 100) %>% 
  ungroup() %>% 
  mutate(taxonomy := ifelse(taxonomy == "no support", NA, taxonomy)) %>% 
  
  ggplot(aes(x = sample_ID, y = relab, fill = taxonomy) ) +
  geom_bar(position = "stack", stat = "identity") +
  scale_fill_manual(values = palette_33) +
  labs(
    y = "Relative abundance (%)",   
    x = "Run ID",
    fill = paste("Taxonomy", " - ", taxonomy_sym_1, ":", taxonomy_sym_2, sep = "")
  ) +
  facet_grid(~ phase + condition, scale = "free_x") +
  theme_bw() +
  theme(legend.position = "right", 
        strip.background = element_rect(color = NA), # Remove background
        axis.text.x = element_text(angle = 90)
  )
```

```{r prepare_phyloseq}
library(phyloseq)

library(DESeq2)


```


