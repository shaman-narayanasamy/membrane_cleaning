---
title: "MAG-level metatranscriptomics analysis"
author: "Shaman Narayanasamy"
editor: source
fig-cap-location: bottom
format:
  pdf: default
execute:
  echo: false 
  warning: false
  message: false
params:
  mag_id:
    label: "MAG ID"
    value: "TI2_MAGScoT_cleanbin_000096"
  cycle_id:
    label: "Cycle ID"
    value: 1
  phase_id:
    label: "Phase ID"
    value: "initial"
---
# Description
```{r}
# Test output for cycle_id
print(params$mag_id)
print(params$cycle_id)
print(params$phase_id)
```

This document was generated directly from a quarto markdown file that contains
the code for the analysis. To view the code, please visit the membrane cleaning
project github repository or request it from the author of this file.

```{r loading libraries, warning=F, message = F}
# tidyverse-friendly packages
library(tidyverse)
library(googlesheets4)
library(metap)
library(patchwork)
library(plotly)
library(ggrepel)
library(GGally)
library(tidyHeatmap)
library(ggsignif)
library(ggprism)
library(kableExtra)

# tidytranscriptomics-related packages
library(tidybulk)
library(tidySummarizedExperiment) # we'll load this below to show what it can do
library(sva) # Must be loaded AFTER tidySummarizedExperiment as there is a clash in one of the dependency packages
library(DESeq2)
```
## Data 
```{r load_MAG_data}
mag_id <- params$mag_id

bakta2MAG_path <- '/ibex/scratch/projects/c2188/membrane_cleaning/output/metatranscriptomics/quantification/bin2bakta_id_mappings.tsv'

bakta2MAG <- sprintf('ssh ibex "cat %s"', bakta2MAG_path ) %>%   
  pipe() %>%  
  read_tsv(col_names = c("MAG_ID", "Bakta_ID"))

Bakta_IDs_of_interest <- filter(bakta2MAG, MAG_ID %in% c(mag_id)) %>% pull(Bakta_ID)
```
This analysis focuses on the MAG `r params$mag_id` for membrane cleaning cycle
`r params$cycle_id` which represents taxa with the following information:
```{r load_MAG_information}
read_tsv("/Users/naras0c/Work/data/membrane_cleaning/dereplicated_refined_MAG_information-ncbi.tsv") %>% 
  separate(genome, into = c("MAG"), sep = '\\.') %>% 
  filter(MAG == mag_id) %>% 
  t() %>% 
  kbl() %>% 
  kable_minimal()
```

```{r load_sample_information}
cycle_id = params$cycle_id
phase_id = params$phase_id

sample_info <- 
  read_tsv('/Users/naras0c/Work/data/membrane_cleaning/mt_sample_info.txt', comment = "#") %>% 
  mutate(sample_ID = paste(sample, lane, sep = '_'),
         lane = as.numeric(str_extract(lane, "\\d+"))) %>% 
  select(sample_ID, cycle = replicate, everything(), -sample, -R1, -R2) %>% 
  filter(cycle == cycle_id, phase == phase_id)

annotation_folder <- '/ibex/scratch/projects/c2188/membrane_cleaning/output/annotation/all/bakta/'

MAG_annotation <- 
  sprintf('ssh ibex "cat %s"', paste(annotation_folder, mag_id, paste0(mag_id, ".tsv"), sep = '/')) %>%  
  pipe() %>%   
  read_tsv(comment = "#", col_names = F) %>% 
  select(feature = X6, type = X2, gene_symbol = X7, gene_function = X8, gene_IDs = X9, contig = X1, start = X3, end = X4 )
```

```{r select_features_from_MAG}
counts <- 
  read_tsv("/Users/naras0c/Work/data/membrane_cleaning/metatranscriptomics_counts.tsv")

counts <- 
  counts %>%  
  filter(Bakta_ID %in% Bakta_IDs_of_interest) %>% 
  pivot_longer(
    cols = sample_info %>% pull(sample_ID),
    names_to = "sample_ID", 
    values_to = "counts") %>% 
  left_join(sample_info, by = "sample_ID") %>% 
  separate(sample_ID, into = c("SampleName"), sep = '_', remove = F, extra = "drop") %>% 
  mutate(SampleName = str_remove(SampleName, "\\d+")) %>% 
  select(feature = Name, 
         sample = sample_ID, 
         counts, 
         SampleName, 
         condition, 
         phase, 
         cycle, 
         lane, 
         Run = sample_ID, 
         avgLength = EffectiveLength) %>% 
  as_SummarizedExperiment(.sample = sample,
                          .transcript = feature,
                          .abundance = counts)
```
## Scaling and normalisation
Scaling  and/or normalisation is typically carried out by individual
differential expression (DE) analysis methods. However, this is not a standard
transcriptomics analysis, rather an analysis of a pseudo-isolate (i.e. MAG)
isolate analysis using metatranscrtipcomics data, hence we perform several
strategies for normalising the data. These inlude:

1. ComBat-seq normalisation based on batch effect correction
2. Housekeeping gene (HKG) -based scaling
3. Combination of all the above


```{r create_DESeq2_object}
dds <- DESeq2::DESeqDataSet(counts %>% as_tibble() %>% mutate(counts = as.integer(counts + 1),
                                                              condition = as.factor(condition),
                                                              phase = as.factor(phase),
                                                              cycle = as.factor(cycle),
                                                              lane = as.factor(lane)
                                                              ) %>% 
                              select(-cycle) %>% 
      as_SummarizedExperiment(.abundance = counts, .sample = sample, .transcript = feature),   
      design = ~ condition + lane)
```

```{r compbat_seq_scaling, output = F}
combat_counts <- 
  ComBat_seq(counts(dds), 
             batch = dds$lane,
             group = dds$condition
             ) %>% 
  as_tibble(rownames = "feature") %>% 
  pivot_longer(cols = sample_info$sample_ID, names_to = "sample", values_to = "combat_counts") %>% 
  right_join(counts %>% as_tibble(), by = c("feature", "sample")) %>% 
  dplyr::select(-counts) %>% 
  dplyr::rename("counts" = "combat_counts") %>% 
  as_SummarizedExperiment(.abundance = counts,
                          .sample = sample,
                          .transcript = feature)
```
### Housekeeping gene (HKG) evaluation
The genes in @tbl-hkg_list are considered housekeeping genes and are evaluated
for their suitability to be used for scaling the data. @tbl-hkg_genes_count shows the 
statistical evaluation of the housekeeping genes that were detected within the MAG and 
@fig-hkg_expression_conditions visualises the expression of those housekeeping
genes. 

The HKG with the lowest coefficient of variation (cv) as the reference
housekeeping gene. Equivalent evaluation was conducted for ComBat-seq normalised
data (@tbl-hkg_genes_combat) reveals that the ComBat batch correction procedure
significantly reduced the variability between HKGs. Similarly, the least
variable gene is automatically selected as the reference HKG.
  
```{r list_housekeeping_genes}
housekeeping_genes <- c("gyrA",
                        "gyrB",
                        "recA",
                        "rho",
                        "ffh",
                        "fusA",
                        "dnaK",
                        "groEL",
                        "groES") 
```

```{r}
#| label: tbl-hkg_list
#| tbl-cap: "List of housekeeping genes."
housekeeping_genes %>% 
  as_tibble() %>% 
  dplyr::rename(`housekeeping_gene_symbol` = value) %>% 
  kbl() %>% 
  kable_minimal()
```
```{r show_hkg_information}
#| label: tbl-hkg_genes_count
MAG_annotation %>% 
  filter(gene_symbol %in% housekeeping_genes) %>% 
  left_join(counts %>% as_tibble(), by = "feature") %>% 
  group_by(feature, sample) %>% 
  summarize(
    avg_count = mean(counts, na.rm = TRUE)
  ) %>%
  ungroup() %>% 
  group_by(feature) %>% 
    summarize(
    mean_count = mean(avg_count, na.rm = TRUE),
    sd_count = sd(avg_count, na.rm = TRUE),
    cv = sd_count / mean_count
  ) %>%
  arrange(cv) %>% 
  left_join(MAG_annotation) %>% 
  select(gene_symbol, mean = mean_count, sd = sd_count, cv, `function` = gene_function) %>% 
  kbl() %>% 
  kable_minimal()
```

```{r visualise_hkg_condition}
#| fig-cap: "Expression of housekeeping genes within conditions based on raw counts."
#| label: fig-hkg_expression_conditions

MAG_annotation %>% 
  filter(gene_symbol %in% housekeeping_genes) %>% 
  left_join(counts %>% as_tibble(), by = "feature") %>% 
  # make faceted stripchart
  ggplot(aes(x = condition, y = counts + 1, fill = condition, group = condition)) +
  geom_boxplot() +
  geom_jitter() +
  facet_wrap(~gene_symbol) +
  scale_y_log10() +
  theme_minimal()
```
```{r hkg_selection}
top_hkg <- 
  MAG_annotation %>% 
  filter(gene_symbol %in% housekeeping_genes) %>% 
  left_join(counts %>% as_tibble(), by = "feature") %>% 
  group_by(feature, sample) %>% 
  summarize(
    avg_count = mean(counts, na.rm = TRUE)
  ) %>%
  ungroup() %>% 
  group_by(feature) %>% 
    summarize(
    mean_count = mean(avg_count, na.rm = TRUE),
    sd_count = sd(avg_count, na.rm = TRUE),
    cv = sd_count / mean_count
  ) %>%
  ungroup() %>% 
  arrange(cv) %>% 
  pull("feature") %>% 
  .[1] 

hkg_vector <- rownames(dds) %in% top_hkg

dds_hkg <- DESeq2::estimateSizeFactors(dds, controlGenes = hkg_vector)

## Convert back again to tidybulk experimental object to ensure downstream compatibility
hkg_counts <- counts(dds_hkg, normalized = T) %>% round() %>% as_tibble(rownames = "feature") %>% 
  pivot_longer(cols = sample_info$sample_ID, names_to = "sample", values_to = "hkg_counts") %>%  
  right_join(counts %>% as_tibble(), by = c("feature", "sample")) %>% 
  dplyr::select(-counts) %>% 
  dplyr::rename(counts = hkg_counts) %>% 
  as_SummarizedExperiment(.abundance = counts,
                          .sample = sample,
                          .transcript = feature)
```

```{r hkg_combat}
#| label: tbl-hkg_genes_combat
MAG_annotation %>% 
  filter(gene_symbol %in% housekeeping_genes) %>% 
  left_join(combat_counts %>% as_tibble(), by = "feature") %>% 
  group_by(feature, sample) %>% 
  summarize(
    avg_count = mean(counts, na.rm = TRUE)
  ) %>%
  ungroup() %>% 
  group_by(feature) %>% 
    summarize(
    mean_count = mean(avg_count, na.rm = TRUE),
    sd_count = sd(avg_count, na.rm = TRUE),
    cv = sd_count / mean_count
  ) %>%
  arrange(cv) %>% 
  left_join(MAG_annotation) %>% 
  select(gene_symbol, mean = mean_count, sd = sd_count, cv, `function` = gene_function) %>% 
  kbl() %>% 
  kable_minimal()
```

```{r}
top_hkg <- 
  MAG_annotation %>% 
  filter(gene_symbol %in% housekeeping_genes) %>% 
  left_join(counts %>% as_tibble(), by = "feature") %>% 
  group_by(feature, sample) %>% 
  summarize(
    avg_count = mean(counts, na.rm = TRUE)
  ) %>%
  ungroup() %>% 
  group_by(feature) %>% 
    summarize(
    mean_count = mean(avg_count, na.rm = TRUE),
    sd_count = sd(avg_count, na.rm = TRUE),
    cv = sd_count / mean_count
  ) %>%
  ungroup() %>% 
  arrange(cv) %>% 
  pull("feature") %>% 
  .[1] 

hkg_vector <- rownames(dds) %in% top_hkg
dds_hkg <- DESeq2::estimateSizeFactors(dds, controlGenes = hkg_vector)

## Convert back again to tidybulk experimental object to ensure downstream compatibility
hkg_combat_counts <- counts(dds_hkg, normalized = T) %>% round() %>% as_tibble(rownames = "feature") %>% 
  pivot_longer(cols = sample_info$sample_ID, names_to = "sample", values_to = "hkg_counts") %>%  
  right_join(counts %>% as_tibble(), by = c("feature", "sample")) %>% 
  dplyr::select(-counts) %>% 
  dplyr::rename(counts = hkg_counts) %>% 
  as_SummarizedExperiment(.abundance = counts,
                          .sample = sample,
                          .transcript = feature)
```
```{r initialise lists} 
p.bp <- list()
p.dp <- list()
p.hm <- list()
```

```{r boxplot_raw_counts}
p.bp[[1]] <-  
  counts %>% as_tibble() %>%  
  ggplot(aes(x = .sample, y = log(counts), fill = as.character(condition))) +
  geom_boxplot() 
```
```{r density_raw_counts}
p.dp[[1]] <-   
  counts %>% as_tibble() %>%  
  ggplot(aes(x=counts, color=as.character(.sample))) + 
  geom_density() +
  scale_x_log10() + 
  theme_minimal()
```

```{r heatmap_raw_counts}
p.hm[[1]] <- 
  counts %>% 
  keep_abundant(minimum_counts = 1) %>% 
  
  # extract 100 most variable genes
  keep_variable(.abundance = counts, top = 100) %>%
  as_tibble() %>%
  mutate(condition = as.character(condition), 
         lane = as.character(lane)) %>% 
  
  # create heatmap
  heatmap(
    .column = sample,
    .row = feature,
    .value = counts,
    transform = log1p,
    name = "counts"
  ) %>%
  add_tile(condition) %>%
  add_tile(lane)
```


```{r heatmap_combat}
p.hm[[2]] <- 
  combat_counts %>% 
  keep_abundant(minimum_counts = 1) %>% 
  
  # extract 100 most variable genes
  keep_variable(.abundance = counts, top = 100) %>%
  as_tibble() %>%
  mutate(condition = as.character(condition), 
         lane = as.character(lane)) %>% 
  
  # create heatmap
  heatmap(
    .column = sample,
    .row = feature,
    .value = counts,
    transform = log1p,
    name = "combat"
  ) %>%
  add_tile(condition) %>%
  add_tile(lane)
```

```{r boxplot_hkg}
p.bp[[3]] <- 
  hkg_counts %>% as_tibble() %>%   
  ggplot(aes(x = .sample, y = log(counts), fill = as.character(condition))) +
  geom_boxplot() 
```
```{r density_plot_hkg}
p.dp[[3]] <-  
  hkg_counts %>% as_tibble() %>%  
  ggplot(aes(x=counts, color=as.character(.sample))) +
  geom_density() + 
  scale_x_log10() + 
  theme_minimal()
```
```{r heatmap_hkg}
p.hm[[3]] <- 
  hkg_counts %>% 
  keep_abundant(minimum_counts = 1) %>% 
  
  # extract 100 most variable genes
  keep_variable(.abundance = counts, top = 100) %>%
  as_tibble() %>%
  mutate(condition = as.character(condition), 
         lane = as.character(lane)) %>% 
  
  # create heatmap
  heatmap(
    .column = sample,
    .row = feature,
    .value = counts,
    transform = log1p
  ) %>%
  add_tile(condition) %>%
  add_tile(lane)
```

```{r boxplot_combat_hkg}
p.bp[[4]] <- 
  hkg_combat_counts %>% as_tibble() %>%  
  ggplot(aes(x = .sample, y = log(counts), fill = as.character(condition))) +
  geom_boxplot() 
```
```{r density_plot_combat_hkg}
p.dp[[4]] <- 
  hkg_combat_counts %>% as_tibble() %>%  
  ggplot(aes(x=counts, color=as.character(.sample))) + 
  geom_density() +
  scale_x_log10() + 
  theme_minimal()
```
```{r heatmap_combat_hkg}
p.hm[[4]] <- 
  hkg_combat_counts %>% 
  keep_abundant(minimum_counts = 1) %>% 
  
  # extract 100 most variable genes
  keep_variable(.abundance = counts, top = 100) %>%
  as_tibble() %>%
  mutate(condition = as.character(condition), 
         lane = as.character(lane)) %>% 
  
  # create heatmap
  heatmap(
    .column = sample,
    .row = feature,
    .value = counts,
    transform = log1p
  ) %>%
  add_tile(condition) %>%
  add_tile(lane)
```

```{r generate_boxplot, eval = F}
for (i in 1:length(p.bp)){
  print(paste("Processing index:", i))
  if (i <= 3){
    p.bp[[i]] <- 
      p.bp[[i]] +  
      theme( 
        axis.text.x = element_blank(), 
        axis.title.x = element_blank()
      ) 
  } else {
   p.bp[[i]] <- p.bp[[i]] + 
     theme(
       axis.text.x = element_text(angle = 90)
       )
  }
  print(paste("Completed index:", i))
}
```
```{r plot_boxplots}
#| label: fig-boxplot
#| fig-cap: "Boxplots of unnormalised raw counts and various normalised/scaled counts. HKG - housekeeping genes based scaling." 
#| fig-subcap:
#|   - "Raw counts"
#|   - "ComBat-seq" 
#|   - "HKG" 
#|   - "ComBat-seq + HKG" 
#| layout-ncol: 1
#| fig-height: 2

p.bp[[1]] 
p.bp[[2]] 
p.bp[[3]] 
p.bp[[4]] 
```

```{r plot_density_plots}
#| label: fig-density_plot
#| fig-cap: "Density plots of unnormalised raw counts and various normalised/scaled counts. HKG - housekeeping genes based scaling." 
#| fig-subcap:
#|   - "Raw counts"
#|   - "ComBat-seq" 
#|   - "HKG" 
#|   - "ComBat-seq + HKG" 
#| layout-ncol: 2
p.dp[[1]] 
p.dp[[2]] 
p.dp[[3]] 
p.dp[[4]] 
```

```{r}
#| label: fig-heatmap
#| fig-cap: "Heatmap of topm variable genes in the unnormalised raw counts and various normalised/scaled counts. HKG - housekeeping genes based scaling." 
#| fig-subcap:
#|   - "Raw counts"
#|   - "ComBat-seq" 
#|   - "HKG" 
#|   - "ComBat-seq + HKG" 
#| layout-ncol: 2
#| fig-height: 8
p.hm[[1]] 
p.hm[[2]] 
p.hm[[3]] 
p.hm[[4]] 
```

## Differential expression analysis
Differential expression (DE) contrasts are separated into initial and backflush
flow. Transcripts that have a count of at least one read in at least 70% of the
samples are considered sufficiently abundant for downstream DE analysis. The
model applied for DE tests is `~condition + lane`. Specifically, we compute the
contrast between the true biological conditions of interest (i.e. treatment vs
control) while "removing" technical differences stemming from the sequencing
`lane` from the model, also known as (modelling out). DE is performed using four
different methods:

1. EdgeR using quasi-likelihood tests (QLT) 
2. EdgeR using likelihood ratio (LR) tests 
3. limma-voom
4. DESeq2

Each of these methods are applied to the raw counts and the three different
normalisation/scaling methods, i.e. i) ComBat-seq, ii) HKG and iii) ComBat-seq +
HKG. This results in a total of 16 different DE results.

The DE results were consolidated based on the following criteria: 

1. Identified as differentially expressed in at least one combination of data
normalisation (e.g. raw, ComBat, HKG, etc.) and DE analysis method (i.e.
EdgeR-QLT, DESeq2). This results in up to a total of 16 combinations
2. Count the number of DE tests that were performed on the transcript out of the possible 16, i.e. non-NA values
3. Count the number of DE tests in which the p-value \leq 0.05 from those identified in 2. (above)
4. Compute a composite p-value using Fisher and Stouffer test based on the p-values from all the different DE analysis (and their combinations, thereof)
5. Correct the composite p-values using multiple methods (i.e. Benjamini-Hochberg, Benjamini-Yukateli, Bonferroni, false discovery rate; FDR)

A transcript that is significantly differentially expressed based on the following criteria:

1. Significant (i.e. p-value \leq 0.05) in at least 50% of the DE analysis which contained p-values (i.e. non-NA)
2. Composite Fisher test FDR \leq 0.05
3. Consistent expression directionality (i.e. up/down) accross all the different tests (i.e. log fold-change)
4. Absolute fold-chage of 2

@fig-volcano shows an overview of the expressed genes, while @fig-topgenes
visualises the expression of the most significant genes.


```{r define_expression_object_list}
expr_list <- list("raw" = counts, "combat" = combat_counts, "hkg" = hkg_counts, "combat_hkg" = hkg_combat_counts)
```
```{r function_de}
## Function: Perform all DE analysis methods on given tables/normalisations including different phases
compute_DE_genes <- function(expr_list){ 
  
  for (i in 1:length(expr_list)){ 
    
    expr_obj <-
      expr_list[[i]] %>% 
      keep_abundant(minimum_counts = 1) 
    
    expr_source <- names(expr_list)[i]
    
    if (expr_obj %>% as.tibble() %>% select(sample) %>% distinct() %>% nrow() > 3) { 
      
      tmp_de_res <-   
        
        expr_obj %>%  
        # edgeR QLT 
        test_differential_abundance( 
          ~ condition + lane, 
          method = "edgeR_quasi_likelihood", 
          prefix = paste0(expr_source, "_", "edgerQLT_") 
          ) %>%
    
        # edgeR LRT
        test_differential_abundance(
          ~ condition + lane,
          method = "edgeR_likelihood_ratio",
          prefix = paste0(expr_source, "_", "edgerLR_")
        ) %>%
      
        # limma-voom
        test_differential_abundance(
          ~ condition + lane,
          method = "limma_voom",
          prefix = paste0(expr_source, "_", "voom_")
        )  
      ## DESeq2 
      
      tmp_de_res <-   
        expr_obj %>% 
        as_tibble() %>% 
        mutate(counts = round(counts)) %>% 
        as_SummarizedExperiment(.sample = sample, 
                                .abundance = counts,
                                .transcript = feature) %>% 
        test_differential_abundance(
          ~ condition + lane,
          method = "DESeq2",
          prefix = paste0(expr_source, "_", "DESeq2_")
          ) %>% 
        as_tibble() %>% 
        select(contains("DESeq2_")) %>% 
        bind_cols(tmp_de_res %>% as_tibble(), .) %>%  
        as_SummarizedExperiment(.sample = sample,
                                .abundance = counts,
                                .transcript = feature)
      
      
      ## Now join the tables  
      if (i == 1){ 
        de_res <-  
          tmp_de_res %>% 
          as_tibble() %>% 
          distinct() %>%   
          select(-c(".feature",   
                    ".sample", 
                    "counts", 
                    "sample", 
                    "SampleName", 
                    "condition", 
                    "phase", 
                    "cycle", 
                    "lane", 
                    "Run", 
                    ".abundant")) %>%  
          distinct() 
        } else { 
          de_res <-  
            full_join(de_res,  
                      tmp_de_res %>% as_tibble() %>%    
                        select(-c(".feature",    
                                  ".sample", 
                                  "counts", 
                                  "sample", 
                                  "SampleName", 
                                  "condition", 
                                  "phase", 
                                  "cycle", 
                                  "lane", 
                                  "Run", 
                                  ".abundant")) %>%   
                        distinct(),  
                      by = c("feature", "avgLength")) %>%   
            distinct()  
          
          }  
    } else {(print("No results"))} 
  } 
  return(de_res) 
}
```

```{r function_expression_consistency}
# Function: Define consistency of directionality
all_same_direction <- function(values) {
  non_na_values <- na.omit(values)
  all(non_na_values > 0) | all(non_na_values < 0)
}
```

```{r function_compute_compostite_scores}
## Function: Compute composite DE scores such as proportion of significant p-values and composite p-values and adjusted p-values
compute_composite_DE_results <- function(de_res){ 
  # List p-value columns
  pvalue_cols <- 
    de_res %>% 
    select(contains("_PValue"), contains("_P.Value"), contains("_pvalue")) %>% 
    colnames()
  
  # List fold-change columns
  fc_cols <- 
    de_res %>% 
    select(contains("Fold"), contains("FC")) %>%  
    select(!contains("DESeq2_lfcSE")) %>% 
    colnames()
  
  comp_de_res <-  
    de_res %>%  
    rowwise() %>%  
    mutate(significant_count = sum(across(all_of(pvalue_cols),  
                                          ~ifelse(is.na(.), NA, . < 0.05)), na.rm = TRUE),  
           non_na_count = sum(!is.na(across(all_of(pvalue_cols))))) %>%  
    ungroup() %>%  
    mutate(significant_proportion = significant_count/non_na_count) %>%  
    rowwise() %>%  
    mutate(consistent_direction = all_same_direction(across(all_of(fc_cols)))) %>%
    ungroup() %>% 
    mutate(    
      composite_p_val_fisher = pmap_dbl(  
        select(., matches("_PValue|P\\.Value|_pvalue")),
        .f = function(...) { 
          args <- list(...)
          p_values <- na.omit(unlist(args))
          if (length(p_values) == 0) {
            return(NA_real_)
          }
          sumlog(p_values)$p
        }
        ),
      composite_p_val_stouffer = pmap_dbl( 
        select(., matches("_PValue|P\\.Value|_pvalue")),
        .f = function(...) {
          args <- list(...)
          p_values <- na.omit(unlist(args))
          if (length(p_values) == 0) {
            return(NA_real_)
          }
          metap::sumz(p_values)$p
        }
        )   
    ) %>%   
    mutate( 
      composite_p_val_fisher_BH = p.adjust(composite_p_val_fisher, method = "BH"),
      composite_p_val_stouffer_BH = p.adjust(composite_p_val_stouffer, method = "BH"),
      composite_p_val_fisher_BY = p.adjust(composite_p_val_fisher, method = "BY"),
      composite_p_val_stouffer_BY = p.adjust(composite_p_val_stouffer, method = "BY"),
      composite_p_val_fisher_bonferroni = p.adjust(composite_p_val_fisher, method = "bonferroni"),
      composite_p_val_stouffer_bonferroni = p.adjust(composite_p_val_stouffer, method = "bonferroni"),
      composite_p_val_fisher_fdr = p.adjust(composite_p_val_fisher, method = "fdr"),
      composite_p_val_stouffer_fdr = p.adjust(composite_p_val_stouffer, method = "fdr") 
      )
}
```

```{r compute_de}
de_dat <- compute_DE_genes(expr_list = expr_list)

if(is.null(de_dat)){   
  print("No results, skipping computation of composite p-values.") 
  } else {  
    de_dat <- compute_composite_DE_results(de_dat) 
    }
```

```{r write_full_table, eval = F}
write_tsv(de_dat, 
          paste0("/Users/naras0c/Work/data/membrane_cleaning/", 
                 mag_id, 
                 "-cycle_",  cycle_id, 
                 "-", phase_id,
                 "differential_expression_results.tsv")
          ) 
)

de_dat %>% 
  filter(composite_p_val_fisher_fdr <= 0.05 & 
           significant_proportion > 0.5 & 
           combat_DESeq2_log2FoldChange >= abs(log2(2))) %>% 
  select(feature, composite_p_val_fisher, composite_p_val_fisher_fdr, significant_proportion, raw_edgerQLT_logFC) %>% 
  left_join(MAG_annotation, by = "feature") %>% 
  bind_cols(phase = "initial") %>% 
  select(feature, phase, everything()) %>% 
  write_tsv(paste0("/Users/naras0c/Work/data/membrane_cleaning/", 
                   mag_id, 
                   "-cycle_", cycle_id, 
                   "-", phase_id,
                   "-differential_expression_results-2FC_0.05FDR_withAnnotation.tsv")
  )
```

```{r get_top_genes}
topgenes <- 
  de_dat %>% 
  arrange(composite_p_val_fisher) %>%
  head(10) %>%
  pull(feature) 
```

```{r volcano_plot}
#| label: fig-volcano
#| fig-cap: "Volcano plot of differentially expressed genes. P-values are based on the composite Fischer p-value and fold-changes are based on raw counts edgeR quasi-likelihood test computation." 
#| fig-subcap:
#|   - "Initial flow"
#|   - "Backflush" 
#| layout-ncol: 1
counts %>%  
  full_join(de_dat %>% select(feature, contains("raw_"), composite_p_val_fisher, composite_p_val_fisher_fdr), by = "feature") %>% 
  mutate(log10_composite_p_val_fisher = log10(composite_p_val_fisher)) %>% 
  pivot_transcript(.transcript = .feature) %>%
  filter(!is.na(raw_edgerQLT_logFC)) %>% 
  mutate(significant = composite_p_val_fisher_fdr <= 0.05 & abs(raw_edgerQLT_logFC) >= log2(2)) %>% 
  mutate(symbol = ifelse(.feature %in% topgenes, as.character(.feature), "")) %>% 
  ggplot(aes(x = raw_edgerQLT_logFC, y = -log10_composite_p_val_fisher, label = symbol)) +
  geom_point(aes(color = significant, size = significant)) +
  geom_text_repel() +
  theme_minimal() +
  scale_color_manual(values = c("black", "#e11f28")) +
  scale_size_discrete(range = c(1, 2))
```
```{r prepare_plot_annotation_data}
# This annotation data stores the necessary values to be incoroporated into
# plots. These include composite pvalues (to indicate significance) and maximum
# count values for each feature (for the y-position mapping of the pvalue bars
# in the plot.)

plot_annotation_dat <-  
  MAG_annotation %>%  
  inner_join(de_dat, by = "feature") %>%  
  left_join(counts %>% as_tibble(), by = "feature") %>%  
  mutate(gene_name = coalesce(gene_symbol, gene_function)) %>%  
  # Add a column to check for uniqueness 
  mutate(is_unique = !duplicated(gene_name) & !duplicated(gene_name, fromLast = TRUE)) %>%
  # Modify non-unique values by appending from append_col
  mutate(gene_name = if_else(is_unique, gene_name, paste0(gene_name, ": ", feature))) %>%
  # Optionally remove the helper column 
  select(-is_unique) %>%  
  select(feature, gene_name, gene_function, composite_p_val_fisher_fdr, condition, counts) %>%
  distinct() %>% 
  mutate(group1 = "control", group2 = "treatment",
         fisher_fdr_round = round(composite_p_val_fisher_fdr, 5)) %>% 
  group_by(feature) %>% 
  mutate(ypos = max(counts)) %>% 
  select(-counts) %>%  
  distinct()
```

```{r}
#| label: fig-topgenes
#| fig-cap: "Stripchart of the most significantly expressed genes." 
#| layout-ncol: 1

counts %>%

  # extract counts for top differentially expressed genes
  filter(feature %in% topgenes) %>%
  left_join(plot_annotation_dat, by = c("feature","condition")) %>% 
  ggplot(aes(x = condition, y = counts + 1, 
               fill = condition, group = condition)) +
    geom_violin(colour = NA, alpha = 0.25) +
    geom_boxplot(colour = "gray75", alpha = 0.25, width = 0.2) +
    geom_jitter(aes(colour = condition), alpha = 0.25, ) +
    scale_y_log10() +
    theme_minimal() +
    add_pvalue(data = plot_annotation_dat %>% filter(feature %in% topgenes), 
               label = "Fisher FDR = {fisher_fdr_round}", 
               y.position = "ypos", 
               bracket.nudge.y = 0.1) +
    facet_wrap(~gene_name, ncol = 3) 
```

## Biofilm formation
Biofilm formation is a complex process and there is vast amounts of literature
covering it. Two methods were employed to search for biofilm-related genes. 

We use keywords related to biofilm formation and search them against our gene
annotations. These keywords include: "Biofilm", "Quorum sensing", "Adhesion",
"Exopolysaccharide", "Motility", "Flagella", "Pili", "Extracellular" and
"Matrix". *DISCLAIMER*: These keywords were collected via a shallow literature
search and with ChatGPT.

The relevant genes are displayed in @fig-biofilm_genes.

```{r biofilm_genes}
## Source table from Biofilm Structural Database
#biofilm_genes <- 
#read_csv('/Users/shaman.narayanasamy/Work/Data/KAUST/membrane_cleaning/biofilms-database-2023-12-13.csv', comment = "#") %>% 
#  select(Protein) %>% distinct() %>% filter(!is.na(Protein)) %>% pull(Protein) 


#Below are a list of some genes and gene categories commonly associated with
#biofilm formation in bacteria:
#
#1. Adhesion Molecules and Surface Proteins:
#
#- fimH, flp, pilA: Typically involved in pilus formation.
#- bap (Biofilm-associated protein): Common in Staphylococcus spp.
#- icaA, icaD (InterCellular Adhesin): Important in polysaccharide intercellular adhesin (PIA) production, especially in Staphylococcus epidermidis.
#
#2. Exopolysaccharide (EPS) Synthesis Genes:
#
#- psl, pel: Genes in Pseudomonas aeruginosa for EPS production.
#- vps (vibrio polysaccharide synthesis genes): Found in Vibrio spp.
#
#3. Quorum Sensing (QS) System Genes:
#
#- luxI, luxR: Autoinducer synthase and receptor genes in Vibrio spp.
#- agrA-D (Accessory gene regulator): Important in Staphylococcus aureus.
#- lasI, lasR, rhlI, rhlR: Key QS genes in Pseudomonas aeruginosa.
#
#4. Genes Regulating c-di-GMP Levels:
#
#- cdgA, cdgB, cdgC: Genes regulating cyclic di-GMP, a second messenger in biofilm formation.
#
#5. Stress Response and Tolerance Genes:
#
#- rpoS (Sigma S factor): Involved in stress response, common in E. coli.
#- cspD: Cold shock protein, can be involved in biofilm formation under stress conditions.
#
#6. Motility and Chemotaxis Genes:
#
#- flg, fli, mot: Flagellar assembly genes.
#- cheA, cheY: Chemotaxis genes.
#
#The gene symbols are complied into a list and are searched through the annotations.

biofilm_genes <- c("fimH", "flp", "pilA", "bap", "icaA", "icaB", "icaC", "icaD", 
                   "psl", "pel", "vps", "luxI", "luxR", "agrA", "agrB", 
                   "agrC", "agrD", "lasI", "lasR", "rhlI", "rhlR", 
                   "cdgA", "cdgB", "cdgC", "rpoS", "cspD", "flg", 
                   "fli", "mot", "cheA", "cheY", "fnbA", "fnbB",
                   "clfA", "clfB", "fib", "epbs", "eno", "cna")

keywords <- c("Biofilm", "Quorum sensing", "Adhesion", "Exopolysaccharide", "Motility", "Flagella", "Pili", "Extracellular", "matrix")

pattern <- paste(keywords, collapse = "|")
```

```{r fig_biofilm_genes, fig.height = 12, fig.width = 6}
#| label: fig-biofilm_genes_initial
#| fig-cap: "Strip-violin-chart of the most significantly expressed biofilm-related genes in the initial flow." 
#| fig-height: 7
top_biofilm_genes_table <- 
  
  counts %>%

  # extract counts for top differentially expressed genes
  left_join(plot_annotation_dat, by = c("feature","condition")) %>%
  filter(grepl(pattern, gene_function, ignore.case = TRUE)) %>%
  left_join(de_dat %>% select(-composite_p_val_fisher_fdr), by = c("feature")) %>%  
  filter(counts > 1 & composite_p_val_fisher_fdr <= 0.05 & abs(combat_edgerQLT_logFC) >= abs(log2(2)) & significant_proportion)  %>% 
  as_tibble() %>% 
  arrange(composite_p_val_fisher_fdr)

top_biofilm_genes_table %>% 
  ggplot(aes(x = condition, y = counts + 1, 
               fill = condition, group = condition)) +
    #geom_violin(colour = NA, alpha = 0.25) +
    geom_boxplot(colour = "gray75", alpha = 0.5, width = 0.1) +
    geom_jitter(aes(colour = condition), alpha = 0.5, ) +
    scale_y_log10() +
    theme_minimal() +
    add_pvalue(data = plot_annotation_dat %>% filter(feature %in% unique(top_biofilm_genes_table$feature)), 
               label = "Fisher FDR = {fisher_fdr_round}", 
               y.position = "ypos", 
               bracket.nudge.y = 0.1) +
    facet_wrap(~gene_name, ncol = 3) 
```
```{r}
#top_biofilm_genes_table %>% 
#  select(.feature, gene_name, gene_function, composite_p_val_fisher_fdr, raw_DESeq2_log2FoldChange, combat_DESeq2_log2FoldChange) %>% distinct() %>% 
#  write_tsv("")
```



